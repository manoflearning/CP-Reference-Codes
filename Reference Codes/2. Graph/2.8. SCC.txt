int N;
vector<int> adj[MAXV + 5];
int label[MAXV + 5];

void Tarjan_Algorithm() {
    memset(label, -1, sizeof(label));
    //DFS 스패닝 트리
    for (int v = 0; v < N; v++)
        if (label[v] == -1) DFS(v);
}

int DFS(int v) {
    label[v] = labelCnt++;
    S.push(v);

    int ret = label[v];
    for (int next : adj[v]) {
        //방문하지 않은 
        if (label[next] == -1) ret = min(ret, DFS(next));
        //방문은 했으나 아직 SCC로 분류되지 않은 정점
        else if (!finished[next]) ret = min(ret, label[next]);
    }

    if (ret == label[v]) {
        vector<int> vSCC;
        while (true) {
            int t = S.top();
            S.pop();

            vSCC.push_back(t);
            SCCnum[t] = SCCcnt;
            finished[t] = true;

            if (t == v) break;
        }

        SCC.push_back(vSCC);
        SCCcnt++;
    }

    return ret;
}​